<?php
/**
 *
 * @filesource   Version.php
 * @created      19.11.2020
 * @package      chillerlan\QRCode\Common
 * @author       smiley <smiley@chillerlan.net>
 * @copyright    2020 smiley
 * @license      MIT
 */

namespace chillerlan\QRCode\Common;

use chillerlan\QRCode\QRCode;
use chillerlan\QRCode\QRCodeException;

use function array_column, array_combine, array_keys;

/**
 * Class Version
 */
class Version{

	/**
	 * ISO/IEC 18004:2000 Tables 7-11 - Number of symbol characters and input data capacity for versions 1 to 40
	 *
	 * @var int [][]
	 */
	const MAX_BITS = [
		//  v  => [    L,     M,     Q,     H]  // modules
		1  => [  152,   128,   104,    72], //  21
		2  => [  272,   224,   176,   128], //  25
		3  => [  440,   352,   272,   208], //  29
		4  => [  640,   512,   384,   288], //  33
		5  => [  864,   688,   496,   368], //  37
		6  => [ 1088,   864,   608,   480], //  41
		7  => [ 1248,   992,   704,   528], //  45
		8  => [ 1552,  1232,   880,   688], //  49
		9  => [ 1856,  1456,  1056,   800], //  53
		10 => [ 2192,  1728,  1232,   976], //  57
		11 => [ 2592,  2032,  1440,  1120], //  61
		12 => [ 2960,  2320,  1648,  1264], //  65
		13 => [ 3424,  2672,  1952,  1440], //  69 NICE!
		14 => [ 3688,  2920,  2088,  1576], //  73
		15 => [ 4184,  3320,  2360,  1784], //  77
		16 => [ 4712,  3624,  2600,  2024], //  81
		17 => [ 5176,  4056,  2936,  2264], //  85
		18 => [ 5768,  4504,  3176,  2504], //  89
		19 => [ 6360,  5016,  3560,  2728], //  93
		20 => [ 6888,  5352,  3880,  3080], //  97
		21 => [ 7456,  5712,  4096,  3248], // 101
		22 => [ 8048,  6256,  4544,  3536], // 105
		23 => [ 8752,  6880,  4912,  3712], // 109
		24 => [ 9392,  7312,  5312,  4112], // 113
		25 => [10208,  8000,  5744,  4304], // 117
		26 => [10960,  8496,  6032,  4768], // 121
		27 => [11744,  9024,  6464,  5024], // 125
		28 => [12248,  9544,  6968,  5288], // 129
		29 => [13048, 10136,  7288,  5608], // 133
		30 => [13880, 10984,  7880,  5960], // 137
		31 => [14744, 11640,  8264,  6344], // 141
		32 => [15640, 12328,  8920,  6760], // 145
		33 => [16568, 13048,  9368,  7208], // 149
		34 => [17528, 13800,  9848,  7688], // 153
		35 => [18448, 14496, 10288,  7888], // 157
		36 => [19472, 15312, 10832,  8432], // 161
		37 => [20528, 15936, 11408,  8768], // 165
		38 => [21616, 16816, 12016,  9136], // 169
		39 => [22496, 17728, 12656,  9776], // 173
		40 => [23648, 18672, 13328, 10208], // 177
	];

	/**
	 * ISO/IEC 18004:2000 Annex E, Table E.1 - Row/column coordinates of center module of Alignment Patterns
	 *
	 * version -> pattern
	 *
	 * @var int[][]
	 */
	public const ALIGNMENT_PATTERN = [
		1  => [],
		2  => [6, 18],
		3  => [6, 22],
		4  => [6, 26],
		5  => [6, 30],
		6  => [6, 34],
		7  => [6, 22, 38],
		8  => [6, 24, 42],
		9  => [6, 26, 46],
		10 => [6, 28, 50],
		11 => [6, 30, 54],
		12 => [6, 32, 58],
		13 => [6, 34, 62],
		14 => [6, 26, 46, 66],
		15 => [6, 26, 48, 70],
		16 => [6, 26, 50, 74],
		17 => [6, 30, 54, 78],
		18 => [6, 30, 56, 82],
		19 => [6, 30, 58, 86],
		20 => [6, 34, 62, 90],
		21 => [6, 28, 50, 72,  94],
		22 => [6, 26, 50, 74,  98],
		23 => [6, 30, 54, 78, 102],
		24 => [6, 28, 54, 80, 106],
		25 => [6, 32, 58, 84, 110],
		26 => [6, 30, 58, 86, 114],
		27 => [6, 34, 62, 90, 118],
		28 => [6, 26, 50, 74,  98, 122],
		29 => [6, 30, 54, 78, 102, 126],
		30 => [6, 26, 52, 78, 104, 130],
		31 => [6, 30, 56, 82, 108, 134],
		32 => [6, 34, 60, 86, 112, 138],
		33 => [6, 30, 58, 86, 114, 142],
		34 => [6, 34, 62, 90, 118, 146],
		35 => [6, 30, 54, 78, 102, 126, 150],
		36 => [6, 24, 50, 76, 102, 128, 154],
		37 => [6, 28, 54, 80, 106, 132, 158],
		38 => [6, 32, 58, 84, 110, 136, 162],
		39 => [6, 26, 54, 82, 110, 138, 166],
		40 => [6, 30, 58, 86, 114, 142, 170],
	];

	/**
	 * ISO/IEC 18004:2000 Annex D, Table D.1 - Version information bit stream for each version
	 *
	 * no version pattern for QR Codes < 7
	 *
	 * @var int[]
	 */
	protected const VERSION_PATTERN = [
		7  => 0b000111110010010100,
		8  => 0b001000010110111100,
		9  => 0b001001101010011001,
		10 => 0b001010010011010011,
		11 => 0b001011101111110110,
		12 => 0b001100011101100010,
		13 => 0b001101100001000111,
		14 => 0b001110011000001101,
		15 => 0b001111100100101000,
		16 => 0b010000101101111000,
		17 => 0b010001010001011101,
		18 => 0b010010101000010111,
		19 => 0b010011010100110010,
		20 => 0b010100100110100110,
		21 => 0b010101011010000011,
		22 => 0b010110100011001001,
		23 => 0b010111011111101100,
		24 => 0b011000111011000100,
		25 => 0b011001000111100001,
		26 => 0b011010111110101011,
		27 => 0b011011000010001110,
		28 => 0b011100110000011010,
		29 => 0b011101001100111111,
		30 => 0b011110110101110101,
		31 => 0b011111001001010000,
		32 => 0b100000100111010101,
		33 => 0b100001011011110000,
		34 => 0b100010100010111010,
		35 => 0b100011011110011111,
		36 => 0b100100101100001011,
		37 => 0b100101010000101110,
		38 => 0b100110101001100100,
		39 => 0b100111010101000001,
		40 => 0b101000110001101001,
	];

	/**
	 * QR Code version number
	 */
	protected int $version;

	/**
	 * Version constructor.
	 *
	 * @throws \chillerlan\QRCode\QRCodeException
	 */
	public function __construct(int $version){

		if($version < 1 || $version > 40){
			throw new QRCodeException('invalid version number');
		}

		$this->version = $version;
	}

	public function getVersionNumber():int{
		return $this->version;
	}

	public function getDimension():int{
		return $this->version * 4 + 17;
	}

	public function getVersionPattern():?int{
		return self::VERSION_PATTERN[$this->version] ?? null;
	}

	public function getAlignmentPattern():array{
		return self::ALIGNMENT_PATTERN[$this->version];
	}

	public static function getMaxBitsForEcc(int $eccLevel):array{
		return array_combine(
			array_keys(self::MAX_BITS),
			array_column(self::MAX_BITS, QRCode::ECC_MODES[$eccLevel])
		);
	}

}
